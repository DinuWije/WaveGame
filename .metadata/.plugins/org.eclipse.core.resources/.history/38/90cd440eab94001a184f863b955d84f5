import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

public class Menu extends MouseAdapter{
	
	private Game game;
	private Handler handler;
	private Random r;
	Player player;
	
	public Menu(Game game, Handler handler) {
		this.game = game;
		this.handler = handler;
		mobBots();
	}
	
	public void mousePressed(MouseEvent e) {
		int mx = e.getX();
		int my = e.getY();
		if (Game.gameState == Game.STATE.Menu) {
			if (mouseOver(mx, my, 210, 150, 200, 64)) {
				HUD.HEALTH = 100;
				game.hud.setLevel(1);
				game.hud.setScore(0);
				killAll();
				Game.startGame(handler);
			} else if (mouseOver(mx, my, 210, 250, 200, 64)) {
				Game.gameState = Game.STATE.Help;
			} else if (mouseOver(mx, my, 210, 350, 200, 64)) {
				System.exit(1);
			}
		} else if (Game.gameState == Game.STATE.Help) {
			if (mouseOver(mx, my, 210, 350, 200, 64)) {
				Game.gameState = Game.STATE.Menu;
			}
		} else if (Game.gameState == Game.STATE.Game) {
			if (mouseOver(mx, my, 549, 14, 52, 34)) {
				killAll();
				HUD.HEALTH = 100;
				game.hud.setLevel(1);
				game.hud.setScore(0);
				Game.gameState = Game.STATE.Menu;
				mobBots();
			} else if (mouseOver(mx, my, 484, 14, 52, 34)) {
				for (int i = 0; i < handler.object.size(); i++) {
					GameObject tempObject = handler.object.get(i);
					tempObject.setTempVelX(tempObject.getVelX());
					tempObject.setTempX(tempObject.getX());
					tempObject.setVelX(0);
					
					tempObject.setTempVelY(tempObject.getVelY());
					tempObject.setTempY(tempObject.getY());
					tempObject.setVelY(0);
					}
				//game.hud.setTempScore(game.hud.getScore());
				Game.gameState = Game.STATE.Pause;
			}
		} else if (Game.gameState == Game.STATE.GameOver) {
			if (mouseOver(mx, my, 225, 325, 200, 64)) {
				Game.gameState = Game.STATE.Menu;
				mobBots();
			}
		} else if (Game.gameState == Game.STATE.Pause) {
			if (mouseOver(mx, my, 225, 325, 200, 64)) {
				for (int i = 0; i < handler.object.size(); i++) {
					GameObject tempObject = handler.object.get(i);
					tempObject.setVelX(tempObject.getTempVelX());
					tempObject.setVelY(tempObject.getTempVelY());
					tempObject.setX(tempObject.getTempX());
					tempObject.setY(tempObject.getTempY());
					}
				//game.hud.setScore(game.hud.getTempScore());;
				Game.gameState = Game.STATE.Game;
			}
		}
		
	}
	
	public void mouseReleased(MouseEvent e) {
		
	}
	
	private boolean mouseOver(int mx, int my, int x, int y, int width, int height) {
		if(mx > x && mx < x + width) {
			if (my > y && my < y + height) {
				return true;
			}else return false;
		}else return false;
	}
	
	public void tick() {
		
	}
	
	public void render(Graphics g) {
		Font fnt = new Font("arial", 1, 50);
		Font fnt2 = new Font("arial", 1, 30);
		Font fnt3 = new Font("arial", 1, 15);
		g.setColor(Color.white);
		
		if (Game.gameState == Game.STATE.Menu) {
			g.setFont(fnt);
			g.drawString("Menu", 240, 70);
			
			g.setFont(fnt2);
			g.drawString("High Score: " + game.getHighScore(), 200, 110);
			
			g.drawRect(210, 150, 200, 64);
			g.drawString("Play", 280, 190);
			
			g.drawRect(210, 250, 200, 64);
			g.drawString("Help", 280, 290);
			
			g.drawRect(210, 350, 200, 64);
			g.drawString("Quit", 280, 390);
						
		} 
		
		if (Game.gameState == Game.STATE.Help) {
			g.setFont(fnt);
			g.drawString("Help", 240, 70);
			
			g.setFont(fnt3);
			g.drawString("You're the white rectangle. Avoid all moving rectangles.", 10, 190);
			g.drawString("Stationary mini-squares are powerups. Have Fun!", 10, 205);
			
			g.drawRect(210, 350, 200, 64);
			g.drawString("Go Back", 280, 390);	
		}
		
		if (Game.gameState == Game.STATE.GameOver) {
			g.setColor(Color.red);
			g.setFont(fnt);
			g.drawString("Game Over", 180, 200);
			
			g.setColor(Color.white);
			g.setFont(fnt2);
			g.drawString("Score: " + game.hud.getScore(), 240, 260);
			
			g.drawRect(225, 325, 200, 64);
			g.drawString("Main Menu", 248,368);
		}
		
		if (Game.gameState == Game.STATE.Pause) {
			g.setColor(Color.black);			
			g.fillRect(0, 0, Game.WIDTH, Game.HEIGHT);
			
			g.setColor(Color.red);
			g.setFont(fnt);
			g.drawString("Paused", 235, 200);
			
			g.setColor(Color.white);
			g.setFont(fnt2);
			g.drawString("Score: " + game.hud.getScore(), 255, 260);
			
			g.drawRect(225, 325, 200, 64);
			g.drawString("Resume", 265,368);
			
		}		
		
	}
	
	public void killAll() {
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < handler.object.size(); j++) {
				GameObject tempObject2 = handler.object.get(j);
				handler.removeObject(tempObject2);
				}
			}
		}
	
	public void mobBots() {
		int numMobs = ThreadLocalRandom.current().nextInt(5, 10);
		r = new Random();
		for (int i = 0; i < numMobs; i++) {
			int tempSize = ThreadLocalRandom.current().nextInt(10, 20);
			handler.addObject(new MenuBot(r.nextInt(Game.WIDTH-50), r.nextInt(Game.HEIGHT-50), ID.MenuBot, tempSize, tempSize, handler));
		}
	}

}
